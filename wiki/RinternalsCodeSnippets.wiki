#summary Snippets of code that I have found really useful when working with R objects in C
#labels pboot,R,C,RAPI,snippets

= Introduction =

== Evaluating a C string in R == 
{{{
char mystring[] = "sample(10)";
SEXP parsed = eval(lang4(install("parse"),mkString("") , mkString(""),mkString(mystring)),  R_GlobalEnv);
PrintValue(eval(lang2(install("eval"),parsed), R_GlobalEnv));
}}}


== Converting a SEXP object to C string ==
Not sure if this is the best way to do it. Before you pass the object to C you need to deparse it (calling same R deparse function from C using evals gives different results).
`.Call("mycfunc", deparse(data))`

{{{
SEXP mycfunc(SEXP data){
    printf("type %s\n", CHAR(STRING_ELT(data,0)));
}
}}}

== Creating variable length expression ==
{{{   
      SEXP s, t;
         PROTECT(t = s = allocList(3));
         SET_TYPEOF(s, LANGSXP);
         SETCAR(t, install("print")); t = CDR(t);
         SETCAR(t,  CAR(a)); t = CDR(t);
         SETCAR(t, ScalarInteger(digits));
         SET_TAG(t, install("digits"));
         eval(s, env);
         UNPROTECT(1);
}}}